Searching 12 files for "renderer"

/Users/garygould/Desktop/fix/PapaBearCurrent/client/js/app.js:
   21  	game.state = 'loading';
   22  	
   23: 	renderer.state = "loading";
   24  	
   25  	game.then = Date.now();

/Users/garygould/Desktop/fix/PapaBearCurrent/client/js/builder.js:
   60  	
   61  	var xy = user.getHoldingCoords(builder.refs[builder.item]);
   62: 	renderer.drawRect("rgb(180,100,80)", xy.x, xy.y, builder.refs[builder.item].width, builder.refs[builder.item].height);
   63  }
   64  

/Users/garygould/Desktop/fix/PapaBearCurrent/client/js/design.js:
  131  );
  132  
  133: renderer.styles = {
  134  	"large": new Style("rgb(255,255,255)", {fontSize: 1.8, lineWidth: 1}),
  135  	"block text": new Style("rgb(255,255,255)", {fontSize: .75, lineWidth: .2}),
  ...
  239  
  240  imageArray.forEach(function(image){
  241: 	renderer.upload(image);
  242  });
  243  
  ...
  329  
  330  //drawing things
  331: renderer['game'] = function(){
  332  	//you can pass an array that contains items that have draw functions
  333  	//you can pass a single object with a draw function, 
  334  	//or you can pass a function that grabs certain objects with draw functions
  335: 	renderer.drawAll([
  336  		game.server,
  337  	 	game.forAllTeams,
  338  	 	game.saved.objects,
  339  	 	game.forAllPlayers,
  340: 		renderer.UI["timer"],
  341: 		renderer.UI['space bar'],
  342: 		renderer.UI['game screen'],
  343: 		renderer.UI["big screen"],
  344: 		renderer.UI["shift key"],
  345: 		renderer.UI["wood counter"],
  346  		builder
  347  	]);
  ...
  351  
  352  //or you can explicitly state what to draw (good for small little screens)
  353: renderer["loading"] = function(){
  354: 	renderer.UI["big screen"].draw([
  355  		"Loading..."
  356  	]);
  357  }
  358  
  359: renderer["intro"] = function(style){
  360: 	renderer.UI["big screen"].draw([
  361  		"There are three villages. You are " + user.name + " of the " + user.server.team + " village.",
  362  		"Only one village will survive this harsh winter, so you must stockpile as much wood as you can.",
  ...
  367  	]);
  368  }
  369: renderer["server"] = function(){
  370: 	renderer.UI["big screen"].draw([
  371  		"Connecting to server..."
  372  	]);
  373  }
  374  
  375: renderer["score"] = function(){
  376  	var textArr = []
  377  	game.forAllTeams(function(team){
  ...
  381  }
  382  
  383: renderer['clear_frame'] = function(){
  384  	ctx.fillStyle = "rgb(0,0,0)";
  385  	ctx.fillRect(0,0, canvas.width, canvas.height);

/Users/garygould/Desktop/fix/PapaBearCurrent/client/js/game.js:
   89  	user.do = function(){};
   90  
   91: 	renderer.updateCamera();
   92  };
   93  
   ..
   97      var delta = now - this.then;
   98  	
   99: 	renderer['clear_frame']();
  100  	
  101  	if(user.mode == "master") inputManager.masterKeys(delta/1000);
  ...
  103  	if(game.state == "loading"){
  104  		
  105: 		if(renderer.hasLoaded() && soundscape.hasLoaded()) game.state = "waiting";
  106  
  107  	}
  ...
  111  		if(user.confirmed){
  112  			
  113: 			renderer.state = "intro";
  114  
  115  			
  116  		}else{
  117  			
  118: 			renderer.state = "server";
  119  
  120  		}
  ...
  132  		} 
  133  				
  134: 		renderer.state = "game";
  135  		
  136  		//endgame
  ...
  143  	if(game.state == "won"){
  144  		
  145: 		renderer.state = "score";
  146  
  147  	}
  148  	
  149: 	if(renderer[renderer.state]) renderer[renderer.state].call(renderer);
  150  	
  151: 	renderer.reset();
  152  	
  153  	soundscape.check();

/Users/garygould/Desktop/fix/PapaBearCurrent/client/js/inputManager.js:
  117  		
  118  	if(88 in inputManager.keys){
  119: 		renderer.showNote = false;
  120  	}
  121  	
  ...
  227  	}
  228  	if (38 in this.keys) { // user holding up
  229: 		renderer.camera.y += 700 * modifier;
  230  	}
  231  	if (40 in this.keys) { // user holding down
  232: 		renderer.camera.y -= 700 * modifier;
  233  	}
  234  	if (37 in this.keys) { // user holding left
  235: 		renderer.camera.x += 700 * modifier;	
  236  	}
  237  	if (39 in this.keys) { // user holding right
  238: 		renderer.camera.x -= 700 * modifier;
  239  	}
  240  	

/Users/garygould/Desktop/fix/PapaBearCurrent/client/js/renderer.js:
    2  var animate = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || window.mozRequestAnimationFrame;
    3  
    4: //setUp Renderer
    5: var renderer = {
    6  	refs:{},
    7  	camera : {
    .
   24  };
   25  
   26: renderer.spriteData = {
   27  	"tree" : {
   28  		1:{x:0, y:0, width:111, height:131},
   ..
   33  }
   34  
   35: renderer.upload = function(src){
   36  	var newImg = new Image();
   37  	newImg.src = "/images/" + src + ".png";
   ..
   44  }
   45  
   46: renderer.updateCamera = function(){
   47  	this.camera.y = canvas.height/2 - (user.server.y + user.server.height/2);
   48  	this.camera.x = canvas.width/2 - (user.server.x + user.server.width/2);
   49  };
   50  
   51: renderer.drawUI = function(image, coordX, coordY, stretchX, stretchY){
   52  	
   53  	if(!this.refs[image]){
   ..
   62  }
   63  
   64: renderer.drawImage = function(image, coordX, coordY){
   65  	if(typeof image == "object") this.drawImage(image.image, image.x, image.y);
   66  	else ctx.drawImage(this.refs[image], coordX + this.camera.x, coordY + this.camera.y);
   67  };
   68  
   69: renderer.drawImageRelative = function(item , influence){
   70  	var newItem = {};
   71  	newItem.x = item.x + influence.x;
   ..
   76  }
   77  
   78: renderer.drawSprite = function(image, coordX, coordY, sprite){
   79  	
   80  	ctx.drawImage(this.refs[image], sprite.x, sprite.y, sprite.width, sprite.height, coordX + this.camera.x, coordY + this.camera.y, sprite.width, sprite.height);
   ..
   82  };
   83  
   84: renderer.drawRect = function(color, coordX, coordY, width, height){
   85  	
   86  	ctx.fillStyle = color;
   ..
   88  };
   89  	
   90: renderer.fillText = function(text, coordX, coordY){
   91  
   92  	ctx.fillText(text, coordX + this.camera.x, coordY + this.camera.y);
   ..
   94  }
   95  
   96: renderer.playerText = function(player){
   97  	ctx.font = '20px Helvetica';
   98  	ctx.fillStyle = "rgb(255,255,0)";
   ..
  107  };
  108  
  109: renderer.hasLoaded = function(){
  110  	
  111  	//scroll through all images
  ...
  122  }
  123  
  124: renderer.reset = function(){
  125  	this.toReset.forEach(function(item){
  126  		item.render = false;
  ...
  155  	else this.padding.y = 0;
  156  		
  157: 	//if(!renderer.styles[name]) renderer.styles[name] = this;
  158  	
  159  }
  ...
  193  		if(options.condition) this.condition = options.condition;
  194  		else this.condition = null;
  195: 		if(options.reset !== false) renderer.toReset.push(this);	
  196  		if(options.type) this.type = options.type;
  197  		else this.type = "block";
  ...
  207  		this.condition = null;
  208  		this.background = null;
  209: 		renderer.toReset.push(this);
  210  		this.mode = "player";	
  211  		this.type = "block";
  ...
  230  
  231  		
  232: 		var style = renderer.styles[this.box.style];
  233  		style.apply();
  234  
  ...
  247  			//else if(i == item.length -1) paddingY = -style.padding.y;
  248  			
  249: 			if(renderer.refs[item[i]]) renderer.drawUI(item[i], box.x + style.padding.x, box.y + paddingY + (style.lineWidth * (i + 1)), box.width - style.padding.x, style.lineWidth);
  250  			else ctx.fillText(item[i], box.x + style.padding.x, box.y + paddingY + (style.lineWidth * (i + 1)), box.width - (style.padding.x * 2) );
  251  			
  ...
  254  	
  255  	this.bg = function(){
  256: 		if(renderer.refs[this.background]) renderer.drawUI(this.background, box.x, box.y, box.width, box.height);
  257  		
  258  	}
  ...
  275  			var cell = {x: drawX, y: drawY, width: style.gridWidth, height: style.lineWidth}
  276  			
  277: 			renderer.drawUI(item, drawX, drawY, cell.width, cell.height);
  278  					
  279  			//noteCode	
  ...
  286  		}
  287  	}
  288: 	if(!renderer.UI[name]) renderer.UI[name] = this;
  289  }
  290  
  291: renderer.drawAll = function(arr){
  292  	ctx.fillStyle = "rgb(255,255,255)";
  293  	for(var i = 0; i < arr.length; i++){
  294  		if(!arr[i]) continue;
  295: 		if(arr[i].constructor == Array) renderer.drawAll(arr[i]);
  296  		else if(typeof arr[i] == "function") arr[i](function(item){ item.draw() });
  297  		else arr[i].draw();

/Users/garygould/Desktop/fix/PapaBearCurrent/client/js/soundscape.js:
   65  	
   66  	if(user.mode == "master"){
   67: 		var deltaX = Math.abs(renderer.camera.x - coord.x);
   68: 		var deltaY = Math.abs(renderer.camera.y - coord.y);
   69  	}else{
   70  		var deltaX = Math.abs(user.server.x - coord.x);

/Users/garygould/Desktop/fix/PapaBearCurrent/client/js/user.js:
   61  	//drawing a swipe using only code
   62  	"drawBlur": function(player, data){
   63: 	    swipeX = data.x + player.x + renderer.camera.x;
   64: 	    swipeY = data.y + player.y + renderer.camera.y;
   65  	    ctx.beginPath();
   66  	    radius = 55;
   ..
  162  					if(team.score != 0){
  163  				
  164: 						renderer.UI["space bar"].render = true;
  165: 						renderer.UI["space bar"].item = "Steal Wood";
  166  										
  167  						if(this.action){
  ...
  188  	if(!tools.checkCollision(this.server, tree, 41, 36, 78, 78, -25, -25)) return;
  189  
  190: 	if(tree.priority < renderer.UI["space bar"].currentPriority) return;
  191: 	renderer.UI["space bar"].render = true;
  192: 	renderer.UI["space bar"].item = "Chop Tree";
  193: 	renderer.UI["space bar"].currentPriority = tree.priority;
  194  			
  195  	if(!this.action) return;
  ...
  207  	if(!tools.colCheck(this.server, wall, {x: -25, y:-25})) return;
  208  	
  209: 	if(wall.priority < renderer.UI["space bar"].currentPriority) return;
  210: 	renderer.UI["space bar"].render = true;
  211: 	renderer.UI["space bar"].item = "Chop Wall";
  212: 	renderer.UI["space bar"].currentPriority = wall.priority;
  213  	
  214  	if(!this.action) return;
  ...
  226  	if( !tools.colCheck(drop, this.server) ) return;
  227  
  228: 	if(drop.priority < renderer.UI["space bar"].currentPriority) return;
  229: 	renderer.UI["space bar"].render = true;
  230: 	renderer.UI["space bar"].item = "Pick Up";
  231: 	renderer.UI["space bar"].currentPriority = drop.priority;
  232  
  233  	if(!this.action) return;
  ...
  243  	if ( !tools.colCheck(note, this.server) ) return;		
  244  	
  245: 	if(note.priority < renderer.UI["space bar"].currentPriority) return;
  246: 	renderer.UI["space bar"].render = true;
  247: 	renderer.UI["space bar"].item = "Pick Up";
  248: 	renderer.UI["space bar"].currentPriority = note.priority;
  249  
  250  	if(!this.action) return;
  ...
  260  	soundscape.play("pickUp");
  261  
  262: 	renderer.pickedUp = true;
  263: 	renderer.pickedUpItem = item.power;
  264  
  265  	setTimeout(function(){
  266: 	  renderer.pickedUp = false;
  267  	}, 1000);
  268  		
  ...
  324  	note = noteIndex[id];
  325  
  326: 	renderer.UI["game screen"].item = note.lines;
  327: 	renderer.UI["game screen"].render = true;
  328  };
  329  

93 matches across 8 files


Searching 12 files for "big screen"

/Users/garygould/Desktop/fix/PapaBearCurrent/client/js/design.js:
  143  }
  144  
  145: new UI("big screen", {style: "block text",x: "/10", y: 100, width: "/1.2", height: "-100"}, {reset:false, startRender: false, 
  146  	condition: function(){
  147  			if(user.server.dead){
  ...
  341  		renderer.UI['space bar'],
  342  		renderer.UI['game screen'],
  343: 		renderer.UI["big screen"],
  344  		renderer.UI["shift key"],
  345  		renderer.UI["wood counter"],
  ...
  352  //or you can explicitly state what to draw (good for small little screens)
  353  renderer["loading"] = function(){
  354: 	renderer.UI["big screen"].draw([
  355  		"Loading..."
  356  	]);
  ...
  358  
  359  renderer["intro"] = function(style){
  360: 	renderer.UI["big screen"].draw([
  361  		"There are three villages. You are " + user.name + " of the " + user.server.team + " village.",
  362  		"Only one village will survive this harsh winter, so you must stockpile as much wood as you can.",
  ...
  368  }
  369  renderer["server"] = function(){
  370: 	renderer.UI["big screen"].draw([
  371  		"Connecting to server..."
  372  	]);
  ...
  378  		textArr.push(team.name + " : " + team.score);
  379  	});
  380: 	this.UI["big screen"].draw(textArr);
  381  }
  382  

6 matches in 1 file


Searching 12 files for "butt"

0 matches across 0 files


Searching 12 files for "button"

0 matches across 0 files


Searching 12 files for "key"

/Users/garygould/Desktop/fix/PapaBearCurrent/client/js/design.js:
    1  //allow various render contexts
    2: //change key direction from UPLEFTDOWNRIGHT to ULDR for consistency
    3  //make weapon.js, put spear and sword in there
    4  //prevent duplicate notes
    5  //allow various texts to appear for each note
    6  //config probability definitions
    7: //remove all non input key logic from InpuntManager
    8  //remove socket emitting from other turn into functions
    9  //remove non socket logic from socket.js
   ..
  177  new UI("space bar", {style: "on top", x: 200, y: "/1.20", width: "/6", height: "/10"}, { background: "spacebar", startRender: false});
  178  
  179: new UI("shift key", {style: "image", x: 100, y: "/1.20", width: 70, height: "/10"}, { background: "spacebar", reset: false, startRender: true,
  180  	condition: function(){
  181  		if(!user.server.powers) return false;
  ...
  252  });
  253  
  254: inputManager.registerKey("M", {
  255  	master: true, 
  256  	once: true, 
  ...
  263  );
  264  
  265: inputManager.registerKey("N", {
  266  	master: true, 
  267  	once: true, 
  ...
  272  });
  273  
  274: inputManager.registerKey(188, {
  275  	master: true, 
  276  	once: true, 
  ...
  282  });
  283  
  284: inputManager.registerKey(190, {
  285  	master: true, 
  286  	once: true, 
  ...
  292  });
  293  
  294: inputManager.registerKey(191, {
  295  	master: true, 
  296  	once: true, 
  ...
  301  });
  302  
  303: inputManager.registerKey(87, {
  304  	once: true, 
  305  	mode: "player",
  ...
  342  		renderer.UI['game screen'],
  343  		renderer.UI["big screen"],
  344: 		renderer.UI["shift key"],
  345  		renderer.UI["wood counter"],
  346  		builder

/Users/garygould/Desktop/fix/PapaBearCurrent/client/js/game.js:
   99  	renderer['clear_frame']();
  100  	
  101: 	if(user.mode == "master") inputManager.masterKeys(delta/1000);
  102        
  103  	if(game.state == "loading"){

/Users/garygould/Desktop/fix/PapaBearCurrent/client/js/inputManager.js:
    1: //check for keyInputs
    2  var inputManager = {};
    3  
    4: inputManager.keys = [];
    5  inputManager.mouse = {};
    6  
    7: addEventListener("keydown", function (e) {	
    8: 	inputManager.keys[String.fromCharCode(e.keyCode)] = true;
    9: 	inputManager.keys[e.keyCode] = true;
   10  }, false);
   11  
   12: addEventListener("keyup", function (e) {
   13: 	delete inputManager.keys[String.fromCharCode(e.keyCode)];
   14: 	delete inputManager.keys[e.keyCode];
   15  }, false);
   16  
   ..
   33  	this.check();
   34  	
   35: 	if(13 in inputManager.keys){
   36  		
   37  		if(inputManager.pressable.enter){
   ..
   51  
   52  	
   53: 	if (88 in inputManager.keys) { // x
   54  		
   55  		if(inputManager.pressable.x){
   ..
   63  	}
   64  	
   65: 	if (16 in inputManager.keys) { // Player pressed shift
   66  		
   67  		if(inputManager.pressable.shift && user.server.weapon.state == "ready"){
   ..
   75  	}
   76  	
   77: 	if (90 in inputManager.keys) { // user holding z
   78  		
   79  		if(inputManager.pressable.z && !user.dashing && !user.frozen && !user.server.frozen){
   ..
   89  	}
   90  
   91: 	//Check key inputs
   92  	user.moved = false;
   93  	
   94  	if(!user.server.frozen && !user.frozen){
   95  	
   96: 		if (38 in inputManager.keys) {
   97  			user.direction = "up";
   98  			user.moved = true;
   99  		}
  100  			
  101: 		if (40 in inputManager.keys){
  102  			user.direction = "down";
  103  			user.moved = true;
  104  		}
  105  
  106: 		if (37 in inputManager.keys){
  107  			user.direction = "left";
  108  			user.moved = true;
  109  		}
  110  
  111: 		if (39 in inputManager.keys){
  112  			user.direction = "right";
  113  			user.moved = true;
  ...
  116  	}
  117  		
  118: 	if(88 in inputManager.keys){
  119  		renderer.showNote = false;
  120  	}
  ...
  122  	user.action = false;
  123  	
  124: 	if (32 in inputManager.keys) {				
  125  		if(inputManager.pressable.space){
  126  			inputManager.pressable.space = false;
  ...
  131  	}
  132  	//equip sword
  133: 	if (75 in inputManager.keys) {				
  134  		if(inputManager.pressable.k && user.server.powers.spear){
  135  			inputManager.pressable.k = false;
  ...
  141  	
  142  
  143: 	if (48 in inputManager.keys) {
  144  		socket.emit('user_killed', {name: user.name});
  145  	}
  146  	
  147  	//special ability: change color
  148: 	if (77 in inputManager.keys) { // change color of character
  149  		if (user.server.powers.disguise){// has ability
  150  			//pick team
  151: 			if (66 in inputManager.keys) {
  152  				socket.emit('change_team', {name: user.server.name, team: "blue"});
  153  			}
  154: 			if (82 in inputManager.keys) {
  155  				socket.emit('change_team', {name: user.server.name, team: "red"});
  156  			} 
  157: 			if (71 in inputManager.keys) {
  158  				socket.emit('change_team', {name: user.server.name, team: "green"});
  159  			}
  ...
  164  inputManager.toCheck = [];
  165  
  166: inputManager.registerKey = function(char, opts){
  167  	
  168  	if(opts.once) inputManager.pressable[char] = true;
  169  	
  170: 	var newKey = {char: char, conditions: {}};
  171: 	if(opts.once) newKey.once = true;
  172: 	else newKey.once = false;
  173  	
  174: 	if(opts.mode) newKey.mode = opts.mode;
  175: 	else newKey.mode = "player";
  176  			
  177: 	if(opts.on) newKey.on = opts.on;
  178: 	if(opts.off) newKey.off = opts.off;
  179  	
  180: 	if(opts.onCondition) newKey.conditions.on = opts.onCondition;
  181: 	else newKey.conditions.on = function(){return true};
  182  	
  183: 	if(opts.offCondition) newKey.conditions.off = opts.offCondition;
  184: 	else newKey.conditions.off = function(){return true};
  185  
  186: 	if(opts.master) newKey.master = true;
  187  	
  188: 	inputManager.toCheck.push(newKey);
  189  }
  190  
  191  inputManager.check = function(){
  192  	
  193: 	this.toCheck.forEach(function(key){
  194: 		if(key.master && !user.master) return;
  195: 		if(key.mode != "all" && key.mode != user.mode) return;
  196  		
  197: 		if( key.char in this.keys ){
  198: 			if( key.on && !key.conditions.on() ) return;
  199: 			if( key.once && !this.pressable[key.char] ) return;
  200: 			this.pressable[key.char] = false;
  201: 			if(key.on) key.on();
  202  		}else{
  203: 			if( key.off && !key.conditions.off() ) return;
  204: 			if( key.once && this.pressable[key.char] ) return;
  205: 			this.pressable[key.char] = true;
  206: 			if( key.off ) key.off();	
  207  		}
  208  		
  ...
  210  }
  211  
  212: inputManager.masterKeys = function(modifier){	
  213  	
  214  	this.check();
  215  	
  216: 	if(13 in this.keys){
  217  		if(this.pressable.enter){
  218  			this.pressable.enter = false;
  ...
  226  		this.pressable.enter = true;
  227  	}
  228: 	if (38 in this.keys) { // user holding up
  229  		renderer.camera.y += 700 * modifier;
  230  	}
  231: 	if (40 in this.keys) { // user holding down
  232  		renderer.camera.y -= 700 * modifier;
  233  	}
  234: 	if (37 in this.keys) { // user holding left
  235  		renderer.camera.x += 700 * modifier;	
  236  	}
  237: 	if (39 in this.keys) { // user holding right
  238  		renderer.camera.x -= 700 * modifier;
  239  	}
  ...
  241  };
  242  
  243: inputManager.changeKey = function(oldKey, newKey){
  244  	
  245: 	this.toCheck.forEach(function(key){
  246  		
  247: 		if(key.char == oldKey) key.char = newKey; 
  248  	})
  249  }

88 matches across 3 files


Searching 12 files for "usepower"

/Users/garygould/Desktop/fix/PapaBearCurrent/client/js/inputManager.js:
   68  						
   69  			inputManager.pressable.shift = false;
   70: 			user.usePower("sword");
   71  		}
   72  
   ..
  134  		if(inputManager.pressable.k && user.server.powers.spear){
  135  			inputManager.pressable.k = false;
  136: 			user.usePower("spear");
  137  		}
  138  	}else{

/Users/garygould/Desktop/fix/PapaBearCurrent/client/js/user.js:
   72  }
   73  
   74: user.usePower = function(power){
   75  	if(power == "sword") soundscape.broadcast("swipe", 20);
   76  	socket.emit("use_power", {name: user.name, power: power});

3 matches across 2 files


Searching 12 files for ".hp"

0 matches across 0 files


Searching 12 files for "hp"

/Users/garygould/Desktop/fix/PapaBearCurrent/client/js/builder.js:
   30  	this.requestXY = user.getHoldingCoords(this.refs[this.item]);
   31  	
   32: 	socket.emit("request_placement", {hp: 33, type: this.item, hard: true, removed:false, x: this.requestXY.x, y: this.requestXY.y, width: this.refs[this.item].width, height: this.refs[this.item].height });
   33  		
   34  };

1 match in 1 file
